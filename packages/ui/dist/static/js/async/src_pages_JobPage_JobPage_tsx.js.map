{"version":3,"file":"static/js/async/src_pages_JobPage_JobPage_tsx.js","sources":["/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/pages/JobPage/JobPage.tsx"],"sourcesContent":["import type { JobRetryStatus } from '@bull-board/api/typings/app';\nimport cn from 'clsx';\nimport React, { Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory } from 'react-router-dom';\nimport { ArrowLeftIcon } from '../../components/Icons/ArrowLeft';\nimport { JobCard } from '../../components/JobCard/JobCard';\nimport { StickyHeader } from '../../components/StickyHeader/StickyHeader';\nimport { useActiveQueue } from '../../hooks/useActiveQueue';\nimport { useJob } from '../../hooks/useJob';\nimport { useModal } from '../../hooks/useModal';\nimport { useSelectedStatuses } from '../../hooks/useSelectedStatuses';\nimport { links } from '../../utils/links';\nimport buttonS from '../../components/Button/Button.module.css';\n\nconst AddJobModalLazy = React.lazy(() =>\n  import('../../components/AddJobModal/AddJobModal').then(({ AddJobModal }) => ({\n    default: AddJobModal,\n  }))\n);\n\nconst UpdateJobDataModalLazy = React.lazy(() =>\n  import('../../components/UpdateJobDataModal/UpdateJobDataModal').then(\n    ({ UpdateJobDataModal }) => ({\n      default: UpdateJobDataModal,\n    })\n  )\n);\n\nexport const JobPage = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n\n  const queue = useActiveQueue();\n  const { job, status, actions } = useJob();\n  const selectedStatuses = useSelectedStatuses();\n  const modal = useModal<'updateJobData' | 'addJob'>();\n\n  actions.pollJob();\n\n  if (!queue) {\n    return <section>{t('QUEUE.NOT_FOUND')}</section>;\n  }\n\n  if (!job) {\n    return <section>{t('JOB.NOT_FOUND')}</section>;\n  }\n\n  const cleanJob = async () => {\n    await actions.cleanJob(queue.name)(job)();\n    history.replace(links.queuePage(queue.name, selectedStatuses));\n  };\n\n  return (\n    <section>\n      <StickyHeader\n        actions={\n          <>\n            <Link\n              className={cn(buttonS.button, buttonS.default)}\n              to={links.queuePage(queue.name, selectedStatuses)}\n            >\n              <ArrowLeftIcon />\n            </Link>\n            <div> {t('JOB.STATUS', { status: status.toLocaleUpperCase() })}</div>\n          </>\n        }\n      />\n      <JobCard\n        key={job.id}\n        job={job}\n        status={status}\n        actions={{\n          cleanJob,\n          promoteJob: actions.promoteJob(queue.name)(job),\n          retryJob: actions.retryJob(queue.name, status as JobRetryStatus)(job),\n          getJobLogs: actions.getJobLogs(queue.name)(job),\n          updateJobData: () => modal.open('updateJobData'),\n          duplicateJob: () => modal.open('addJob'),\n        }}\n        readOnlyMode={queue.readOnlyMode}\n        allowRetries={(job.isFailed || queue.allowCompletedRetries) && queue.allowRetries}\n      />\n      <Suspense fallback={null}>\n        {modal.isMounted('addJob') && (\n          <AddJobModalLazy\n            open={modal.isOpen('addJob')}\n            onClose={modal.close('addJob')}\n            job={job}\n          />\n        )}\n        {modal.isMounted('updateJobData') && (\n          <UpdateJobDataModalLazy\n            open={modal.isOpen('updateJobData')}\n            onClose={modal.close('updateJobData')}\n            job={job}\n          />\n        )}\n      </Suspense>\n    </section>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;;AAHA;AAMA;AAEA;AAAA;AACA;AACA;;AAJA;AAQA;;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;;;;;;AACA;AAEA;AACA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AAEA;;;;;;;;;;AAEA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;;;;;AAcA;AAAA;;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AAMA;AAxEA;;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAPA"}