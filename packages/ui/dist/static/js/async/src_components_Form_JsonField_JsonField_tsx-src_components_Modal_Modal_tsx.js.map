{"version":3,"file":"static/js/async/src_components_Form_JsonField_JsonField_tsx-src_components_Modal_Modal_tsx.js","sources":["/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/Form/JsonField/JsonField.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/JsonEditor/JsonEditor.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/Modal/Modal.tsx"],"sourcesContent":["import React, { HTMLProps } from 'react';\nimport { JsonEditor } from '../../JsonEditor/JsonEditor';\nimport { Field } from '../Field/Field';\n\ninterface JsonFieldProps extends Omit<HTMLProps<HTMLInputElement>, 'value' | 'ref'> {\n  value?: Record<any, any>;\n  schema?: Record<string, any>;\n}\n\nexport const JsonField = ({ label, id, value, ...rest }: JsonFieldProps) => (\n  <Field label={label} id={id}>\n    <JsonEditor doc={value || {}} id={id} {...rest} />\n  </Field>\n);\n","import {\n  autocompletion,\n  closeBrackets,\n  closeBracketsKeymap,\n  completionKeymap,\n} from '@codemirror/autocomplete';\nimport { defaultKeymap, history, historyKeymap } from '@codemirror/commands';\nimport {\n  bracketMatching,\n  foldGutter,\n  foldKeymap,\n  HighlightStyle,\n  indentOnInput,\n  syntaxHighlighting,\n} from '@codemirror/language';\nimport { diagnosticCount, lintGutter, lintKeymap } from '@codemirror/lint';\nimport { Annotation, EditorState } from '@codemirror/state';\nimport {\n  drawSelection,\n  EditorView,\n  gutter,\n  highlightActiveLineGutter,\n  keymap,\n  lineNumbers,\n  ViewUpdate,\n} from '@codemirror/view';\nimport { tags } from '@lezer/highlight';\nimport { jsonSchema, updateSchema } from 'codemirror-json-schema';\nimport React, { HTMLProps, useEffect, useRef, useState } from 'react';\n\nconst customStyle = HighlightStyle.define([\n  { tag: tags.atom, color: 'var(--hl-keyword)' },\n  { tag: tags.keyword, color: 'var(--hl-keyword)' },\n  { tag: tags.bool, color: 'var(--hl-keyword)' },\n  { tag: tags.string, color: 'var(--hl-string)' },\n  { tag: tags.number, color: 'var(--hl-number)' },\n  { tag: tags.brace, color: 'var(--accent-color-d1)' },\n  { tag: tags.punctuation, color: 'var(--accent-color-d1)' },\n  { tag: tags.propertyName, color: 'var(--hl-type)' },\n]);\n\nconst theme = EditorView.theme({\n  '&': {\n    height: '200px',\n    backgroundColor: 'var(--input-bg)',\n    border: '1px var(--input-border) solid',\n    borderRadius: '0.375rem',\n    boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n    marginTop: '0.25rem',\n    fontSize: '0.875rem',\n    transition: 'border-color 0.2s ease-out, box-shadow 0.2s ease-out',\n  },\n  '&.cm-focused': {\n    outline: 'none',\n    borderColor: 'var(--input-focus-border)',\n    boxShadow: 'var(--input-focus-shadow)',\n  },\n  '.cm-gutters': {\n    borderRadius: '0.375rem 0 0 0.375rem',\n    backgroundColor: 'var(--json-edit-gutter-bg)',\n    color: 'inherit',\n    borderRight: 'var(--json-edit-gutter-border-color)',\n  },\n  '.cm-cursor': {\n    borderLeftColor: 'var(--json-edit-cursor-color)',\n  },\n  '.cm-activeLineGutter': { backgroundColor: 'var(--json-edit-gutter-active-bg)' },\n  '.cm-scroller': { overflow: 'auto' },\n  '.cm-tooltip': {\n    padding: '0.25rem 0.5rem',\n    borderRadius: '0.275rem',\n    backgroundColor: 'var(--json-edit-tooltip-bg)',\n    border: '1px solid var(--json-edit-tooltip-border-color)',\n  },\n  '.cm6-json-schema-hover--code > p': {\n    margin: '0.5em 0',\n  },\n  '.cm-tooltip-above .cm-tooltip-arrow:before': {\n    borderTop: '7px solid var(--json-edit-tooltip-border-color)',\n  },\n  '.cm-tooltip-above .cm-tooltip-arrow:after': {\n    borderTop: '7px solid var(--json-edit-tooltip-bg)',\n  },\n  '.cm-selectionBackground': { background: 'var(--json-edit-selection-bg)!important' },\n});\n\nconst commonExtensions = [\n  gutter({ class: 'CodeMirror-lint-markers' }),\n  bracketMatching(),\n  highlightActiveLineGutter(),\n  // basicSetup,\n  closeBrackets(),\n  history(),\n  autocompletion(),\n  lineNumbers(),\n  lintGutter(),\n  indentOnInput(),\n  drawSelection(),\n  foldGutter(),\n  keymap.of([\n    ...closeBracketsKeymap,\n    ...defaultKeymap,\n    ...historyKeymap,\n    ...foldKeymap,\n    ...completionKeymap,\n    ...lintKeymap,\n  ]),\n  EditorView.lineWrapping,\n  EditorState.tabSize.of(2),\n  syntaxHighlighting(customStyle),\n  theme,\n];\n\nconst External = Annotation.define<boolean>();\n\ninterface IJsonEditorProps extends HTMLProps<HTMLInputElement> {\n  doc: Record<any, any>;\n  schema?: Record<any, any>;\n}\n\nexport const JsonEditor = ({ doc, schema, ...inputProps }: IJsonEditorProps) => {\n  const editorRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [editor, setEditor] = useState<EditorView | null>(null);\n\n  useEffect(() => {\n    const onUpdate = EditorView.updateListener.of((vu: ViewUpdate) => {\n      if (!inputRef.current) {\n        return;\n      }\n      const errorCount = diagnosticCount(vu.state);\n\n      if (\n        !vu.docChanged && // waits for linter\n        !vu.transactions.some((tr) => tr.annotation(External)) &&\n        errorCount === 0\n      ) {\n        const doc = vu.state.doc;\n        inputRef.current.value = doc.toString();\n      } else if (errorCount > 0) {\n        inputRef.current.value = '';\n      }\n    });\n\n    const state = EditorState.create({\n      doc: JSON.stringify(doc, null, 2),\n      extensions: [commonExtensions, onUpdate, jsonSchema(schema || {})],\n    });\n\n    const editor = new EditorView({\n      state,\n      parent: editorRef.current!,\n    });\n\n    setEditor(editor);\n\n    return () => editor.destroy();\n  }, []);\n\n  useEffect(\n    () => {\n      if (editor) {\n        updateSchema(editor!, schema || {});\n      }\n    },\n    schema ? [schema] : []\n  );\n\n  return (\n    <>\n      <div ref={editorRef} />\n      <input type=\"hidden\" ref={inputRef} {...inputProps} />\n    </>\n  );\n};\n","import * as Dialog from '@radix-ui/react-dialog';\nimport cn from 'clsx';\nimport React, { PropsWithChildren } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '../Button/Button';\nimport s from './Modal.module.css';\n\ninterface ModalProps {\n  open: boolean;\n  title?: string;\n  width?: 'small' | 'medium' | 'wide';\n  actionButton?: React.ReactNode;\n  onClose(): void;\n}\n\nexport const Modal = ({\n  open,\n  title,\n  onClose,\n  children,\n  width,\n  actionButton,\n}: PropsWithChildren<ModalProps>) => {\n  const { t } = useTranslation();\n  const closeOnOpenChange = (open: boolean) => {\n    if (!open) {\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog.Root open={open} modal={true} onOpenChange={closeOnOpenChange}>\n      <Dialog.Portal>\n        <Dialog.Overlay className={s.overlay} />\n        <Dialog.Content className={s.contentWrapper}>\n          <div className={cn(s.content, s[width || ''])}>\n            {!!title && <Dialog.Title>{title}</Dialog.Title>}\n            <Dialog.Description asChild>\n              <div className={s.description}>{children}</div>\n            </Dialog.Description>\n            <div className={s.actions}>\n              {actionButton}\n              <Dialog.Close asChild>\n                <Button theme=\"basic\">{t('MODAL.CLOSE_BTN')}</Button>\n              </Dialog.Close>\n            </div>\n          </div>\n        </Dialog.Content>\n      </Dialog.Portal>\n    </Dialog.Root>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;AAEA;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAMA;AACA;AAQA;AACA;AACA;AASA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAAA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;;AAEA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAtDA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxHA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;AACA;AAAA;;AACA;AAAA;;;;;;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAEA;AAAA;;AACA;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AApCA;;AAQA;;;AARA"}