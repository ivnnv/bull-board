{"version":3,"file":"static/js/async/src_components_SettingsModal_SettingsModal_tsx.js","sources":["/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/Form/Field/Field.module.css","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/Form/SwitchField/SwitchField.module.css","/Users/ivnnv/Sites/ivnnv/bull-board/packages/api/dist/constants/statuses.js","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/Form/Field/Field.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/Form/InputField/InputField.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/Form/SelectField/SelectField.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/Form/SwitchField/SwitchField.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/Modal/Modal.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/SettingsModal/SettingsModal.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/hooks/useDetailsTabs.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/node_modules/@radix-ui/react-switch/dist/index.mjs","/Users/ivnnv/Sites/ivnnv/bull-board/node_modules/@radix-ui/react-use-previous/dist/index.mjs"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport default {\"field\":\"src-components-Form-Field-Field-module__field-JbAWJt\",\"inline\":\"src-components-Form-Field-Field-module__inline-vXG0Za\"};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = \"{\\\"field\\\":\\\"src-components-Form-Field-Field-module__field-JbAWJt\\\",\\\"inline\\\":\\\"src-components-Form-Field-Field-module__inline-vXG0Za\\\"}\";\n        // 1756647378733\n        var cssReload = require(\"../../../../../../node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","// extracted by css-extract-rspack-plugin\nexport default {\"switch\":\"src-components-Form-SwitchField-SwitchField-module__switch-DOdNhn\",\"thumb\":\"src-components-Form-SwitchField-SwitchField-module__thumb-tvm2sT\"};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = \"{\\\"switch\\\":\\\"src-components-Form-SwitchField-SwitchField-module__switch-DOdNhn\\\",\\\"thumb\\\":\\\"src-components-Form-SwitchField-SwitchField-module__thumb-tvm2sT\\\"}\";\n        // 1756647378727\n        var cssReload = require(\"../../../../../../node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.STATUSES = void 0;\nexports.STATUSES = {\n    latest: 'latest',\n    active: 'active',\n    waiting: 'waiting',\n    waitingChildren: 'waiting-children',\n    prioritized: 'prioritized',\n    completed: 'completed',\n    failed: 'failed',\n    delayed: 'delayed',\n    paused: 'paused',\n};\n//# sourceMappingURL=statuses.js.map\nfunction $RefreshSig$() {\n  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();\n}\nfunction $RefreshReg$(type, id) {\n  $ReactRefreshRuntime$.register(type, __webpack_module__.id + \"_\" + id);\n}\nPromise.resolve().then(function() {\n  $ReactRefreshRuntime$.refresh(__webpack_module__.id, __webpack_module__.hot);\n});\n","import cn from 'clsx';\nimport React, { PropsWithChildren } from 'react';\nimport s from './Field.module.css';\n\ninterface FieldProps {\n  label?: string;\n  id?: string;\n  inline?: boolean;\n}\n\nexport const Field = ({ label, id, inline, children }: PropsWithChildren<FieldProps>) => (\n  <div className={cn(s.field, { [s.inline]: inline })}>\n    {!!label && !inline && <label htmlFor={id}>{label}</label>}\n    {children}\n    {!!label && inline && <label htmlFor={id}>{label}</label>}\n  </div>\n);\n","import React, { InputHTMLAttributes } from 'react';\nimport { Field } from '../Field/Field';\n\ninterface InputFieldProps extends InputHTMLAttributes<any> {\n  label?: string;\n}\n\nexport const InputField = ({ label, id, ...inputProps }: InputFieldProps) => (\n  <Field label={label} id={id}>\n    <input id={id} type=\"text\" {...inputProps} />\n  </Field>\n);\n","import React, { SelectHTMLAttributes } from 'react';\nimport { Field } from '../Field/Field';\n\nexport interface SelectItem {\n  text: string;\n  value: string;\n}\n\ninterface SelectFieldProps extends SelectHTMLAttributes<any> {\n  label?: string;\n  id?: string;\n  options: SelectItem[];\n}\n\nexport const SelectField = ({ label, id, options, ...selectProps }: SelectFieldProps) => (\n  <Field label={label} id={id}>\n    <select id={id} {...selectProps}>\n      {options.map((option) => (\n        <option key={option.value} value={option.value}>\n          {option.text}\n        </option>\n      ))}\n    </select>\n  </Field>\n);\n","import { SwitchProps } from '@radix-ui/react-switch';\nimport * as Switch from '@radix-ui/react-switch';\nimport React from 'react';\nimport { Field } from '../Field/Field';\nimport s from './SwitchField.module.css';\n\ninterface SwitchFieldProps extends SwitchProps {\n  label?: string;\n  id?: string;\n}\n\nexport const SwitchField = ({ label, id, ...switchProps }: SwitchFieldProps) => (\n  <Field label={label} id={id} inline={true}>\n    <Switch.Root id={id} {...switchProps} className={s.switch}>\n      <Switch.Thumb className={s.thumb} />\n    </Switch.Root>\n  </Field>\n);\n","import * as Dialog from '@radix-ui/react-dialog';\nimport cn from 'clsx';\nimport React, { PropsWithChildren } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '../Button/Button';\nimport s from './Modal.module.css';\n\ninterface ModalProps {\n  open: boolean;\n  title?: string;\n  width?: 'small' | 'medium' | 'wide';\n  actionButton?: React.ReactNode;\n  onClose(): void;\n}\n\nexport const Modal = ({\n  open,\n  title,\n  onClose,\n  children,\n  width,\n  actionButton,\n}: PropsWithChildren<ModalProps>) => {\n  const { t } = useTranslation();\n  const closeOnOpenChange = (open: boolean) => {\n    if (!open) {\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog.Root open={open} modal={true} onOpenChange={closeOnOpenChange}>\n      <Dialog.Portal>\n        <Dialog.Overlay className={s.overlay} />\n        <Dialog.Content className={s.contentWrapper}>\n          <div className={cn(s.content, s[width || ''])}>\n            {!!title && <Dialog.Title>{title}</Dialog.Title>}\n            <Dialog.Description asChild>\n              <div className={s.description}>{children}</div>\n            </Dialog.Description>\n            <div className={s.actions}>\n              {actionButton}\n              <Dialog.Close asChild>\n                <Button theme=\"basic\">{t('MODAL.CLOSE_BTN')}</Button>\n              </Dialog.Close>\n            </div>\n          </div>\n        </Dialog.Content>\n      </Dialog.Portal>\n    </Dialog.Root>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { languages } from '../../constants/languages';\nimport { useSettingsStore } from '../../hooks/useSettings';\nimport { useUIConfig } from '../../hooks/useUIConfig';\nimport { InputField } from '../Form/InputField/InputField';\nimport { SelectField } from '../Form/SelectField/SelectField';\nimport { SwitchField } from '../Form/SwitchField/SwitchField';\nimport { Modal } from '../Modal/Modal';\nimport { availableJobTabs } from '../../hooks/useDetailsTabs';\n\nexport interface SettingsModalProps {\n  open: boolean;\n\n  onClose(): void;\n}\n\nconst pollingIntervals = [-1, 3, 5, 10, 20, 60, 60 * 5, 60 * 15];\nconst maxJobsPerPage = 300;\n\nexport const SettingsModal = ({ open, onClose }: SettingsModalProps) => {\n  const {\n    language,\n    pollingInterval,\n    jobsPerPage,\n    confirmQueueActions,\n    confirmJobActions,\n    collapseJob,\n    collapseJobData,\n    collapseJobOptions,\n    collapseJobError,\n    defaultJobTab,\n    darkMode,\n    setSettings,\n  } = useSettingsStore((state) => state);\n  const { pollingInterval: uiConfigPollingInterval } = useUIConfig();\n  const { t, i18n } = useTranslation();\n\n  return (\n    <Modal width=\"small\" open={open} onClose={onClose} title={t('SETTINGS.TITLE')}>\n      <SelectField\n        label={t('SETTINGS.LANGUAGE')}\n        id=\"language\"\n        options={languages.map((lng) => ({ text: lng, value: lng }))}\n        value={language}\n        onChange={(event) => {\n          i18n.changeLanguage(event.target.value);\n          setSettings({ language: event.target.value });\n        }}\n      />\n      {uiConfigPollingInterval?.showSetting !== false && (\n        <SelectField\n          label={t('SETTINGS.POLLING_INTERVAL')}\n          id=\"polling-interval\"\n          options={pollingIntervals.map((interval) => ({\n            text:\n              interval < 0\n                ? t('SETTINGS.POLLING_OPTIONS.OFF')\n                : Math.floor(interval / 60) === 0\n                ? t('SETTINGS.POLLING_OPTIONS.SECS', { count: interval })\n                : t('SETTINGS.POLLING_OPTIONS.MINS', { count: interval / 60 }),\n            value: `${interval}`,\n          }))}\n          value={`${pollingInterval}`}\n          onChange={(event) => setSettings({ pollingInterval: +event.target.value })}\n        />\n      )}\n      <SelectField\n        label={t('SETTINGS.DEFAULT_JOB_TAB')}\n        id=\"default-job-tab\"\n        options={['default'].concat(availableJobTabs).map((tab) => ({\n          text: t(`JOB.TABS.${tab.toUpperCase()}`),\n          value: tab,\n        }))}\n        value={defaultJobTab}\n        onChange={(event) => setSettings({ defaultJobTab: event.target.value })}\n      />\n      <InputField\n        label={t('SETTINGS.JOBS_PER_PAGE')}\n        id=\"jobs-per-page\"\n        value={jobsPerPage}\n        type=\"number\"\n        min=\"1\"\n        max={maxJobsPerPage}\n        maxLength={3}\n        onChange={(event) => {\n          const jobsPerPage = +event.target.value;\n          setSettings({ jobsPerPage: Math.min(jobsPerPage, maxJobsPerPage) });\n        }}\n      />\n      <SwitchField\n        label={t('SETTINGS.CONFIRM_QUEUE_ACTIONS')}\n        id=\"confirm-queue-actions\"\n        checked={confirmQueueActions}\n        onCheckedChange={(checked) => setSettings({ confirmQueueActions: checked })}\n      />\n      <SwitchField\n        label={t('SETTINGS.CONFIRM_JOB_ACTIONS')}\n        id=\"confirm-job-actions\"\n        checked={confirmJobActions}\n        onCheckedChange={(checked) => setSettings({ confirmJobActions: checked })}\n      />\n      <SwitchField\n        label={t('SETTINGS.COLLAPSE_JOB')}\n        id=\"collapse-job\"\n        checked={collapseJob}\n        onCheckedChange={(checked) => setSettings({ collapseJob: checked })}\n      />\n      <SwitchField\n        label={t('SETTINGS.COLLAPSE_JOB_DATA')}\n        id=\"collapse-job-data\"\n        checked={collapseJobData}\n        onCheckedChange={(checked) => setSettings({ collapseJobData: checked })}\n      />\n      <SwitchField\n        label={t('SETTINGS.COLLAPSE_JOB_OPTIONS')}\n        id=\"collapse-job-options\"\n        checked={collapseJobOptions}\n        onCheckedChange={(checked) => setSettings({ collapseJobOptions: checked })}\n      />\n      <SwitchField\n        label={t('SETTINGS.COLLAPSE_JOB_ERROR')}\n        id=\"collapse-job-error\"\n        checked={collapseJobError}\n        onCheckedChange={(checked) => setSettings({ collapseJobError: checked })}\n      />\n      <SwitchField\n        label={t('SETTINGS.DARK_MODE')}\n        id=\"dark-mode\"\n        checked={darkMode}\n        onCheckedChange={(checked) => setSettings({ darkMode: checked })}\n      />\n    </Modal>\n  );\n};\n","import { STATUSES } from '@bull-board/api/constants/statuses';\nimport type { Status } from '@bull-board/api/typings/app';\nimport { useEffect, useState } from 'react';\nimport { useSettingsStore } from './useSettings';\n\nexport const availableJobTabs = ['Data', 'Options', 'Logs', 'Error'] as const;\n\nexport type TabsType = (typeof availableJobTabs)[number];\n\nexport function useDetailsTabs(currentStatus: Status) {\n  const [tabs, updateTabs] = useState<TabsType[]>([]);\n  const { defaultJobTab } = useSettingsStore();\n\n  const [selectedTab, setSelectedTab] = useState<TabsType>(\n    tabs.find((tab) => tab === defaultJobTab) || tabs[0]\n  );\n\n  useEffect(() => {\n    let nextTabs: TabsType[] = availableJobTabs.filter((tab) => tab !== 'Error');\n    if (currentStatus === STATUSES.failed) {\n      nextTabs = ['Error', ...nextTabs];\n    } else {\n      nextTabs = [...nextTabs, 'Error'];\n    }\n\n    updateTabs(nextTabs);\n  }, [currentStatus]);\n\n  useEffect(() => {\n    setSelectedTab(tabs.includes(defaultJobTab) ? defaultJobTab : tabs[0]);\n  }, [defaultJobTab, tabs]);\n\n  return {\n    tabs: tabs?.map((title) => ({\n      title,\n      isActive: title === selectedTab,\n      selectTab: () => setSelectedTab(title),\n    })),\n    selectedTab,\n  };\n}\n","\"use client\";\n\n// src/switch.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { useSize } from \"@radix-ui/react-use-size\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar SWITCH_NAME = \"Switch\";\nvar [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);\nvar [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);\nvar Switch = React.forwardRef(\n  (props, forwardedRef) => {\n    const {\n      __scopeSwitch,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = \"on\",\n      onCheckedChange,\n      form,\n      ...switchProps\n    } = props;\n    const [button, setButton] = React.useState(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    const isFormControl = button ? form || !!button.closest(\"form\") : true;\n    const [checked, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked ?? false,\n      onChange: onCheckedChange,\n      caller: SWITCH_NAME\n    });\n    return /* @__PURE__ */ jsxs(SwitchProvider, { scope: __scopeSwitch, checked, disabled, children: [\n      /* @__PURE__ */ jsx(\n        Primitive.button,\n        {\n          type: \"button\",\n          role: \"switch\",\n          \"aria-checked\": checked,\n          \"aria-required\": required,\n          \"data-state\": getState(checked),\n          \"data-disabled\": disabled ? \"\" : void 0,\n          disabled,\n          value,\n          ...switchProps,\n          ref: composedRefs,\n          onClick: composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => !prevChecked);\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })\n        }\n      ),\n      isFormControl && /* @__PURE__ */ jsx(\n        SwitchBubbleInput,\n        {\n          control: button,\n          bubbles: !hasConsumerStoppedPropagationRef.current,\n          name,\n          value,\n          checked,\n          required,\n          disabled,\n          form,\n          style: { transform: \"translateX(-100%)\" }\n        }\n      )\n    ] });\n  }\n);\nSwitch.displayName = SWITCH_NAME;\nvar THUMB_NAME = \"SwitchThumb\";\nvar SwitchThumb = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSwitch, ...thumbProps } = props;\n    const context = useSwitchContext(THUMB_NAME, __scopeSwitch);\n    return /* @__PURE__ */ jsx(\n      Primitive.span,\n      {\n        \"data-state\": getState(context.checked),\n        \"data-disabled\": context.disabled ? \"\" : void 0,\n        ...thumbProps,\n        ref: forwardedRef\n      }\n    );\n  }\n);\nSwitchThumb.displayName = THUMB_NAME;\nvar BUBBLE_INPUT_NAME = \"SwitchBubbleInput\";\nvar SwitchBubbleInput = React.forwardRef(\n  ({\n    __scopeSwitch,\n    control,\n    checked,\n    bubbles = true,\n    ...props\n  }, forwardedRef) => {\n    const ref = React.useRef(null);\n    const composedRefs = useComposedRefs(ref, forwardedRef);\n    const prevChecked = usePrevious(checked);\n    const controlSize = useSize(control);\n    React.useEffect(() => {\n      const input = ref.current;\n      if (!input) return;\n      const inputProto = window.HTMLInputElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        inputProto,\n        \"checked\"\n      );\n      const setChecked = descriptor.set;\n      if (prevChecked !== checked && setChecked) {\n        const event = new Event(\"click\", { bubbles });\n        setChecked.call(input, checked);\n        input.dispatchEvent(event);\n      }\n    }, [prevChecked, checked, bubbles]);\n    return /* @__PURE__ */ jsx(\n      \"input\",\n      {\n        type: \"checkbox\",\n        \"aria-hidden\": true,\n        defaultChecked: checked,\n        ...props,\n        tabIndex: -1,\n        ref: composedRefs,\n        style: {\n          ...props.style,\n          ...controlSize,\n          position: \"absolute\",\n          pointerEvents: \"none\",\n          opacity: 0,\n          margin: 0\n        }\n      }\n    );\n  }\n);\nSwitchBubbleInput.displayName = BUBBLE_INPUT_NAME;\nfunction getState(checked) {\n  return checked ? \"checked\" : \"unchecked\";\n}\nvar Root = Switch;\nvar Thumb = SwitchThumb;\nexport {\n  Root,\n  Switch,\n  SwitchThumb,\n  Thumb,\n  createSwitchScope\n};\n//# sourceMappingURL=index.mjs.map\n","// packages/react/use-previous/src/use-previous.tsx\nimport * as React from \"react\";\nfunction usePrevious(value) {\n  const ref = React.useRef({ value, previous: value });\n  return React.useMemo(() => {\n    if (ref.current.value !== value) {\n      ref.current.previous = ref.current.value;\n      ref.current.value = value;\n    }\n    return ref.current.previous;\n  }, [value]);\n}\nexport {\n  usePrevious\n};\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;AAEA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AAMA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;AAEA;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAaA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;;;;;;;;;;;;;;;AAMA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;AAGA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;AACA;AAAA;;AACA;AAAA;;;;;;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAEA;AAAA;;AACA;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AApCA;;AAQA;;;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;;AACA;AAcA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;AAIA;AAlHA;;AAcA;AACA;AACA;;;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;;;;;;;;;;AC/JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA"}