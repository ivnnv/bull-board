{"version":3,"file":"static/js/async/src_components_RedisStatsModal_RedisStatsModal_tsx.js","sources":["/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/RedisStatsModal/RedisStatsModal.module.css","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/Modal/Modal.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/RedisStatsModal/RedisStatsModal.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/node_modules/pretty-bytes/index.js"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport default {\"redisStats\":\"src-components-RedisStatsModal-RedisStatsModal-module__redisStats-bLzaEu\"};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = \"{\\\"redisStats\\\":\\\"src-components-RedisStatsModal-RedisStatsModal-module__redisStats-bLzaEu\\\"}\";\n        // 1756647378721\n        var cssReload = require(\"../../../../../node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import * as Dialog from '@radix-ui/react-dialog';\nimport cn from 'clsx';\nimport React, { PropsWithChildren } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '../Button/Button';\nimport s from './Modal.module.css';\n\ninterface ModalProps {\n  open: boolean;\n  title?: string;\n  width?: 'small' | 'medium' | 'wide';\n  actionButton?: React.ReactNode;\n  onClose(): void;\n}\n\nexport const Modal = ({\n  open,\n  title,\n  onClose,\n  children,\n  width,\n  actionButton,\n}: PropsWithChildren<ModalProps>) => {\n  const { t } = useTranslation();\n  const closeOnOpenChange = (open: boolean) => {\n    if (!open) {\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog.Root open={open} modal={true} onOpenChange={closeOnOpenChange}>\n      <Dialog.Portal>\n        <Dialog.Overlay className={s.overlay} />\n        <Dialog.Content className={s.contentWrapper}>\n          <div className={cn(s.content, s[width || ''])}>\n            {!!title && <Dialog.Title>{title}</Dialog.Title>}\n            <Dialog.Description asChild>\n              <div className={s.description}>{children}</div>\n            </Dialog.Description>\n            <div className={s.actions}>\n              {actionButton}\n              <Dialog.Close asChild>\n                <Button theme=\"basic\">{t('MODAL.CLOSE_BTN')}</Button>\n              </Dialog.Close>\n            </div>\n          </div>\n        </Dialog.Content>\n      </Dialog.Portal>\n    </Dialog.Root>\n  );\n};\n","import type { RedisStats } from '@bull-board/api/typings/app';\nimport { formatDistance } from 'date-fns';\nimport formatBytes from 'pretty-bytes';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useApi } from '../../hooks/useApi';\nimport { useInterval } from '../../hooks/useInterval';\nimport { dateFnsLocale } from '../../services/i18n';\nimport { Modal } from '../Modal/Modal';\nimport s from './RedisStatsModal.module.css';\n\nconst getMemoryUsage = (\n  used?: RedisStats['memory']['used'],\n  total?: RedisStats['memory']['total']\n) => {\n  if (used === undefined) {\n    return '-';\n  }\n\n  if (total === undefined) {\n    return formatBytes(used);\n  }\n\n  return `${((used / total) * 100).toFixed(2)}%`;\n};\n\nexport interface RedisStatsModalProps {\n  open: boolean;\n\n  onClose(): void;\n}\n\nexport const RedisStatsModal = ({ open, onClose }: RedisStatsModalProps) => {\n  const { t } = useTranslation();\n  const [stats, setStats] = useState<RedisStats>(null as any);\n  const api = useApi();\n\n  useInterval(() => api.getStats().then((stats) => setStats(stats)), 5000);\n\n  if (!stats) {\n    return null;\n  }\n\n  const items = [\n    {\n      title: t('REDIS.MEMORY_USAGE'),\n      value: (\n        <>\n          {stats.memory.total && stats.memory.used ? (\n            <small>\n              {formatBytes(stats.memory.used)} of {formatBytes(stats.memory.total)}\n            </small>\n          ) : (\n            <small className=\"error\">{t('REDIS.ERROR.MEMORY_USAGE')}</small>\n          )}\n          {getMemoryUsage(stats.memory.used, stats.memory.total)}\n        </>\n      ),\n    },\n    { title: t('REDIS.PEEK_MEMORY'), value: formatBytes(stats.memory.peak) },\n    { title: t('REDIS.FRAGMENTATION_RATIO'), value: stats.memory.fragmentationRatio },\n    { title: t('REDIS.CONNECTED_CLIENTS'), value: stats.clients.connected },\n    { title: t('REDIS.BLOCKED_CLIENTS'), value: stats.clients.blocked },\n    { title: t('REDIS.VERSION'), value: stats.version },\n    { title: t('REDIS.MODE'), value: stats.mode },\n    { title: t('REDIS.OS'), value: stats.os },\n    {\n      title: t('REDIS.UP_TIME'),\n      value: formatDistance(0, stats.uptime * 1000, {\n        includeSeconds: true,\n        locale: dateFnsLocale,\n      }),\n    },\n  ];\n\n  return (\n    <Modal width=\"small\" open={open} onClose={onClose} title={t('REDIS.TITLE')}>\n      <ul className={s.redisStats}>\n        {items.map((item, i) => (\n          <li key={i}>\n            <span>{item.title}</span>\n            <span>{item.value}</span>\n          </li>\n        ))}\n      </ul>\n    </Modal>\n  );\n};\n","const BYTE_UNITS = [\n\t'B',\n\t'kB',\n\t'MB',\n\t'GB',\n\t'TB',\n\t'PB',\n\t'EB',\n\t'ZB',\n\t'YB',\n];\n\nconst BIBYTE_UNITS = [\n\t'B',\n\t'KiB',\n\t'MiB',\n\t'GiB',\n\t'TiB',\n\t'PiB',\n\t'EiB',\n\t'ZiB',\n\t'YiB',\n];\n\nconst BIT_UNITS = [\n\t'b',\n\t'kbit',\n\t'Mbit',\n\t'Gbit',\n\t'Tbit',\n\t'Pbit',\n\t'Ebit',\n\t'Zbit',\n\t'Ybit',\n];\n\nconst BIBIT_UNITS = [\n\t'b',\n\t'kibit',\n\t'Mibit',\n\t'Gibit',\n\t'Tibit',\n\t'Pibit',\n\t'Eibit',\n\t'Zibit',\n\t'Yibit',\n];\n\n/*\nFormats the given number using `Number#toLocaleString`.\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\n- If locale is true, the system default locale is used for translation.\n- If no value for locale is specified, the number is returned unmodified.\n*/\nconst toLocaleString = (number, locale, options) => {\n\tlet result = number;\n\tif (typeof locale === 'string' || Array.isArray(locale)) {\n\t\tresult = number.toLocaleString(locale, options);\n\t} else if (locale === true || options !== undefined) {\n\t\tresult = number.toLocaleString(undefined, options);\n\t}\n\n\treturn result;\n};\n\nconst log10 = numberOrBigInt => {\n\tif (typeof numberOrBigInt === 'number') {\n\t\treturn Math.log10(numberOrBigInt);\n\t}\n\n\tconst string = numberOrBigInt.toString(10);\n\n\treturn string.length + Math.log10('0.' + string.slice(0, 15));\n};\n\nconst log = numberOrBigInt => {\n\tif (typeof numberOrBigInt === 'number') {\n\t\treturn Math.log(numberOrBigInt);\n\t}\n\n\treturn log10(numberOrBigInt) * Math.log(10);\n};\n\nconst divide = (numberOrBigInt, divisor) => {\n\tif (typeof numberOrBigInt === 'number') {\n\t\treturn numberOrBigInt / divisor;\n\t}\n\n\tconst integerPart = numberOrBigInt / BigInt(divisor);\n\tconst remainder = numberOrBigInt % BigInt(divisor);\n\treturn Number(integerPart) + (Number(remainder) / divisor);\n};\n\nexport default function prettyBytes(number, options) {\n\tif (typeof number !== 'bigint' && !Number.isFinite(number)) {\n\t\tthrow new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\n\t}\n\n\toptions = {\n\t\tbits: false,\n\t\tbinary: false,\n\t\tspace: true,\n\t\t...options,\n\t};\n\n\tconst UNITS = options.bits\n\t\t? (options.binary ? BIBIT_UNITS : BIT_UNITS)\n\t\t: (options.binary ? BIBYTE_UNITS : BYTE_UNITS);\n\n\tconst separator = options.space ? ' ' : '';\n\n\tif (options.signed && (typeof number === 'number' ? number === 0 : number === 0n)) {\n\t\treturn ` 0${separator}${UNITS[0]}`;\n\t}\n\n\tconst isNegative = number < 0;\n\tconst prefix = isNegative ? '-' : (options.signed ? '+' : '');\n\n\tif (isNegative) {\n\t\tnumber = -number;\n\t}\n\n\tlet localeOptions;\n\n\tif (options.minimumFractionDigits !== undefined) {\n\t\tlocaleOptions = {minimumFractionDigits: options.minimumFractionDigits};\n\t}\n\n\tif (options.maximumFractionDigits !== undefined) {\n\t\tlocaleOptions = {maximumFractionDigits: options.maximumFractionDigits, ...localeOptions};\n\t}\n\n\tif (number < 1) {\n\t\tconst numberString = toLocaleString(number, options.locale, localeOptions);\n\t\treturn prefix + numberString + separator + UNITS[0];\n\t}\n\n\tconst exponent = Math.min(Math.floor(options.binary ? log(number) / Math.log(1024) : log10(number) / 3), UNITS.length - 1);\n\tnumber = divide(number, (options.binary ? 1024 : 1000) ** exponent);\n\n\tif (!localeOptions) {\n\t\tnumber = number.toPrecision(3);\n\t}\n\n\tconst numberString = toLocaleString(Number(number), options.locale, localeOptions);\n\n\tconst unit = UNITS[exponent];\n\n\treturn prefix + numberString + separator + unit;\n}\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;AACA;AAAA;;AACA;AAAA;;;;;;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAEA;AAAA;;AACA;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AApCA;;AAQA;;;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAAA;;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;AAEA;;;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AAEA;AAAA;;;;;;AACA;AAAA;;;;;;;AAFA;;;;;;;;;;;;;;;AAQA;AAvDA;;AACA;AAEA;AAEA;;;AALA;;;;;;;;;;;;;;;;;;;;;ACh}