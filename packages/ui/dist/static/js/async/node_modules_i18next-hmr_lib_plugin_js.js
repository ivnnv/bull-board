(self["webpackChunk_bull_board_ui"] = self["webpackChunk_bull_board_ui"] || []).push([["node_modules_i18next-hmr_lib_plugin_js"], {
"../../node_modules/i18next-hmr/lib/plugin.js": (function (module, __unused_webpack_exports, __webpack_require__) {
class HMRPlugin {
  constructor(hmrOptions = {}) {
    this.type = '3rdParty';

    const webpack = hmrOptions.webpack || {};
    const vite = hmrOptions.vite || {};

    if (webpack.client && typeof window !== 'undefined') {
      const applyClientHMR = __webpack_require__("../../node_modules/i18next-hmr/lib/webpack/client-hmr.js");
      applyClientHMR(() => this.i18nInstance);
    } else if (webpack.server && typeof window === 'undefined') {
      const applyServerHMR = __webpack_require__("../../node_modules/i18next-hmr/lib/webpack/server-hmr.js");
      applyServerHMR(() => this.i18nInstance);
    } else if (vite.client && typeof window !== 'undefined') {
      const { applyViteClientHMR } = __webpack_require__("../../node_modules/i18next-hmr/lib/vite/client-hmr.js");
      applyViteClientHMR(() => this.i18nInstance);
    }
  }

  init(i18nInstance) {
    this.i18nInstance = i18nInstance;
  }

  toJSON() {
    return null;
  }

  toString() {
    return 'HMRPlugin';
  }
}

module.exports.HMRPlugin = HMRPlugin;


}),
"../../node_modules/i18next-hmr/lib/utils.js": (function (module) {
function extractLangAndNS(changedFile, currentConfig) {
  const changedFileParts = changedFile.replace(/\\/g, '/').split('/');

  const firstLongestNSMatchParts = []
    .concat(currentConfig.namespaces)
    .map((ns) => ns.split('/'))
    .sort((a, b) => b.length - a.length)
    .find((optionalNS) =>
      optionalNS.every((optionalNSPart) => changedFileParts.includes(optionalNSPart))
    );

  if (!firstLongestNSMatchParts) {
    return { lang: null, ns: null };
  }

  const lang = changedFileParts
    .filter(
      (part) => !firstLongestNSMatchParts.includes(part) && currentConfig.languages.includes(part)
    )
    .join('/');

  return {
    lang,
    ns: firstLongestNSMatchParts.join('/'),
  };
}

function printList(list) {
  return list.map((item) => `${item.lang}/${item.ns}`).join(', ');
}

function extractList(changedFiles, i18nInstance) {
  const namespaces = uniqueList(
    []
      .concat(
        i18nInstance.options.ns,
        i18nInstance.options.fallbackNS,
        i18nInstance.options.defaultNS
      )
      .filter(Boolean)
  );
  const languages = uniqueList(
    [].concat(
      i18nInstance.languages,
      i18nInstance.options.supportedLngs,
      i18nInstance.options.lng,
      i18nInstance.options.fallbackLng
    )
  );

  return changedFiles
    .map((changedFile) => extractLangAndNS(changedFile, { namespaces, languages }))
    .filter(({ lang, ns }) => Boolean(lang) && Boolean(ns));
}

function uniqueList(list) {
  return [...new Set(list)];
}

function createLoggerOnce(logger) {
  const msgCount = new Map();
  return (msg, type = 'log') => {
    const count = msgCount.has(msg) ? msgCount.get(msg) : 0;
    if (count > 0) {
      return;
    }

    logger(msg, type);
    msgCount.set(msg, count + 1);
  };
}

function log(msg, type = 'log') {
  console[type](`[%cI18NextHMR%c] ${msg}`, 'color:#bc93b6', '');
}

const logOnce = createLoggerOnce(log);

async function reloadTranslations(list, i18nInstance) {
  let backendOptions = { queryStringParams: {} };
  try {
    backendOptions = i18nInstance.services.backendConnector.backend.options;
    backendOptions.queryStringParams = backendOptions.queryStringParams || {};
    backendOptions.queryStringParams._ = new Date().getTime(); // cache killer
  } catch (e) {
    logOnce('Client i18next-http-backend not found, hmr may not work', 'warn');
  }

  const langs = uniqueList(list.map((item) => item.lang));
  const namespaces = uniqueList(list.map((item) => item.ns));

  await i18nInstance.reloadResources(langs, namespaces, (error) => {
    if (error) {
      log(error, 'error');
      return;
    }

    const currentLang = i18nInstance.language;

    if (langs.includes(currentLang)) {
      i18nInstance.changeLanguage(currentLang);
      log(`Update applied successfully`);
    } else {
      log(`Resources of '${printList(list)}' were reloaded successfully`);
    }
  });
}

module.exports = {
  printList: printList,
  extractList: extractList,
  log: log,
  createLoggerOnce: createLoggerOnce,
  uniqueList: uniqueList,
  reloadTranslations: reloadTranslations,
};


}),
"../../node_modules/i18next-hmr/lib/vite/client-hmr.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  applyViteClientHMR: () => (applyViteClientHMR)
});
function applyViteClientHMR(i18nOrGetter) {
  if (/* unsupported import.meta.hot */ undefined) {
    const { extractList, printList, reloadTranslations, log } = __webpack_require__("../../node_modules/i18next-hmr/lib/utils.js");

    log('Client HMR has started');

    /* unsupported import.meta.hot */ undefined.on('i18next-hmr:locale-changed', ({ changedFiles }) => {
      const i18nInstance =
        typeof i18nOrGetter === 'function' ? i18nOrGetter({ changedFiles }) : i18nOrGetter;

      const list = extractList(changedFiles, i18nInstance);

      if (!list.length) {
        return;
      }

      log(`Got an update with ${printList(list)}`);

      return reloadTranslations(list, i18nInstance);
    });
  }
}


}),
"../../node_modules/i18next-hmr/lib/webpack/client-hmr.js": (function (module, __unused_webpack_exports, __webpack_require__) {
module.exports = function applyClientHMR(i18nOrGetter) {
  if (true) {
    const { extractList, printList, reloadTranslations, log } = __webpack_require__("../../node_modules/i18next-hmr/lib/utils.js");
    const { changedFile } = __webpack_require__("../../node_modules/i18next-hmr/lib/webpack/trigger.js");

    if (!changedFile || changedFile) {
      // We must use the required variable
      log('Client HMR has started');
    }

    module.hot.accept("../../node_modules/i18next-hmr/lib/webpack/trigger.js", function(__WEBPACK_OUTDATED_DEPENDENCIES__) {
(() => {
      const { changedFiles } = __webpack_require__("../../node_modules/i18next-hmr/lib/webpack/trigger.js");
      const i18nInstance =
        typeof i18nOrGetter === 'function' ? i18nOrGetter({ changedFiles }) : i18nOrGetter;

      const list = extractList(changedFiles, i18nInstance);

      if (!list.length) {
        return;
      }

      log(`Got an update with ${printList(list)}`);

      return reloadTranslations(list, i18nInstance);
    })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this));
  }
};


}),
"../../node_modules/i18next-hmr/lib/webpack/trigger.js": (function (module) {
module.exports = {"changedFiles":[]};
//1756647378581

}),
"../../node_modules/i18next-hmr/lib/webpack/server-hmr.js": (function (module, __unused_webpack_exports, __webpack_require__) {
const { extractList, printList, uniqueList, createLoggerOnce } = __webpack_require__("../../node_modules/i18next-hmr/lib/utils.js");

module.exports = function applyServerHMR(i18nOrGetter) {
  const pluginName = `\x1b[35m\x1b[1m${'I18NextHMR'}\x1b[0m\x1b[39m`;
  function log(message, type = 'log') {
    console[type](`[ ${pluginName} ] ${message}`);
  }

  const logOnce = createLoggerOnce(log);

  function reloadServerTranslation({ changedFiles }) {
    const i18nInstance =
      typeof i18nOrGetter === 'function' ? i18nOrGetter({ changedFiles }) : i18nOrGetter;

    if (!i18nInstance) {
      return;
    }

    const list = extractList(changedFiles, i18nInstance);

    if (list.length === 0) {
      return;
    }

    log(`Got an update with ${printList(list)}`);

    const langs = uniqueList(list.map((item) => item.lang));
    const namespaces = uniqueList(list.map((item) => item.ns));

    i18nInstance.reloadResources(langs, namespaces, (error) => {
      if (error) {
        log(`\x1b[31m\x1b[1m${error}\x1b[0m\x1b[39m`);
      } else {
        log(`Server reloaded locale of ${printList(list)} successfully`);
      }
    });
  }

  if (true) {
    const { changedFile } = __webpack_require__("../../node_modules/i18next-hmr/lib/webpack/trigger.js");

    if (!changedFile || changedFile) {
      // We must use the required variable
      logOnce(`Server HMR has started`);
    }

    module.hot.accept("../../node_modules/i18next-hmr/lib/webpack/trigger.js", function(__WEBPACK_OUTDATED_DEPENDENCIES__) {
(() => {
      const changedFiles = __webpack_require__("../../node_modules/i18next-hmr/lib/webpack/trigger.js");
      reloadServerTranslation(changedFiles);
    })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this));
  } else {}
};


}),

}]);
//# sourceMappingURL=node_modules_i18next-hmr_lib_plugin_js.js.map