{"version":3,"file":"static/js/async/src_components_AddJobModal_AddJobModal_tsx.js","sources":["/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/AddJobModal/AddJobModal.tsx","/Users/ivnnv/Sites/ivnnv/bull-board/packages/ui/src/components/Form/SelectField/SelectField.tsx"],"sourcesContent":["import type { AppJob, AppQueue } from '@bull-board/api/typings/app';\nimport React, { FormEvent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useActiveQueue } from '../../hooks/useActiveQueue';\nimport { useQueues } from '../../hooks/useQueues';\nimport bullJobOptionsSchema from '../../schemas/bull/jobOptions.json';\nimport bullMQJobOptionsSchema from '../../schemas/bullmq/jobOptions.json';\nimport { Button } from '../Button/Button';\nimport { InputField } from '../Form/InputField/InputField';\nimport { JsonField } from '../Form/JsonField/JsonField';\nimport { SelectField } from '../Form/SelectField/SelectField';\nimport { Modal } from '../Modal/Modal';\n\nexport interface AddJobModalProps {\n  open: boolean;\n  job?: AppJob | null;\n  onClose(): void;\n}\n\nconst jobOptionsSchema = {\n  bull: bullJobOptionsSchema,\n  bullmq: bullMQJobOptionsSchema,\n} as const;\n\nexport const AddJobModal = ({ open, onClose, job }: AddJobModalProps) => {\n  const { queues, actions } = useQueues();\n  const activeQueue = useActiveQueue();\n  const [selectedQueue, setSelectedQueue] = useState<AppQueue | null>(activeQueue);\n  const { t } = useTranslation();\n\n  if (!queues || !activeQueue || !selectedQueue) {\n    return null;\n  }\n\n  const addJob = async (evt: FormEvent) => {\n    evt.preventDefault();\n    const form = evt.target as HTMLFormElement;\n    const formData = Object.fromEntries(\n      Array.from(form.elements)\n        .filter((input: any) => input.name)\n        .map((input: any) => [input.name, input.value])\n    );\n\n    formData.jobData = JSON.parse(formData.jobData);\n    formData.jobOptions = JSON.parse(formData.jobOptions);\n\n    await actions.addJob(\n      formData.queueName,\n      formData.jobName || '__default__',\n      formData.jobData,\n      formData.jobOptions\n    )();\n    onClose();\n  };\n\n  return (\n    <Modal\n      width=\"small\"\n      open={open}\n      onClose={onClose}\n      title={t('ADD_JOB.TITLE', { context: job ? 'duplicate' : undefined })}\n      actionButton={\n        <Button type=\"submit\" theme=\"primary\" form=\"add-job-form\">\n          {t(`ADD_JOB.${job ? 'DUPLICATE' : 'ADD'}`)}\n        </Button>\n      }\n    >\n      <form id=\"add-job-form\" onSubmit={addJob}>\n        <SelectField\n          label={t('ADD_JOB.QUEUE_NAME')}\n          id=\"queue-name\"\n          options={(queues || []).map((queue) => ({\n            text: queue.name,\n            value: queue.name,\n          }))}\n          name=\"queueName\"\n          value={selectedQueue.name || ''}\n          onChange={(event) => setSelectedQueue(queues.find((q) => q.name === event.target.value)!)}\n        />\n        <InputField\n          label={t('ADD_JOB.JOB_NAME')}\n          id=\"job-name\"\n          name=\"jobName\"\n          defaultValue={job?.name}\n          placeholder=\"__default__\"\n        />\n        <JsonField label={t('ADD_JOB.JOB_DATA')} id=\"job-data\" name=\"jobData\" value={job?.data} />\n        <JsonField\n          label={t('ADD_JOB.JOB_OPTIONS')}\n          id=\"job-options\"\n          name=\"jobOptions\"\n          schema={jobOptionsSchema[selectedQueue.type]}\n          value={job?.opts}\n        />\n      </form>\n    </Modal>\n  );\n};\n","import React, { SelectHTMLAttributes } from 'react';\nimport { Field } from '../Field/Field';\n\nexport interface SelectItem {\n  text: string;\n  value: string;\n}\n\ninterface SelectFieldProps extends SelectHTMLAttributes<any> {\n  label?: string;\n  id?: string;\n  options: SelectItem[];\n}\n\nexport const SelectField = ({ label, id, options, ...selectProps }: SelectFieldProps) => (\n  <Field label={label} id={id}>\n    <select id={id} {...selectProps}>\n      {options.map((option) => (\n        <option key={option.value} value={option.value}>\n          {option.text}\n        </option>\n      ))}\n    </select>\n  </Field>\n);\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AACA;AAEA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;;;;;AAIA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAKA;AAzEA;;AACA;AACA;AAEA;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AAaA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;;;;;;;;;;;;;;;AAMA;AAVA"}